
import os
import csv
import sqlite3
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@producersdelok")  # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))
DB_PATH = "referrals.db"

# –ü—Ä–∏–∑—ã –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ (–ª–∞–π—Ñ—Ç–∞–π–º)
LEVELS = [
    (3, "–ú–µ—Ä—á üéÅ"),
    (10, "–•—É–¥–∏ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"),
    (25, "–£–º–Ω—ã–µ –≤–µ—Å—ã –∏–ª–∏ –Ω–∞—É—à–Ω–∏–∫–∏"),
]

TOP_LIMIT = 20            # —Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç–æ–ø–∞—Ö
SEASON_TOP_N_TO_SAVE = 3  # —Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ–∑–æ–Ω–∞

# ========= –ò–ù–ò–¶ =========
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

def current_season() -> str:
    return datetime.utcnow().strftime("%Y-%m")

# ========= –ë–î =========
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    tg_id INTEGER PRIMARY KEY,
    username TEXT,
    referrer_id INTEGER,
    referrals_count INTEGER DEFAULT 0,   -- —Å–µ–∑–æ–Ω–Ω—ã–µ
    suspicious INTEGER DEFAULT 0,
    lifetime_referrals INTEGER DEFAULT 0 -- –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS prizes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id INTEGER NOT NULL,
    prize TEXT NOT NULL,
    given_at TEXT DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS season_winners (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    season TEXT,
    tg_id INTEGER,
    place INTEGER,
    referrals_count INTEGER,
    given_at TEXT DEFAULT CURRENT_TIMESTAMP
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS awarded_levels (
    tg_id INTEGER,
    level_threshold INTEGER,
    PRIMARY KEY (tg_id, level_threshold)
)
""")

# –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
cursor.execute("CREATE INDEX IF NOT EXISTS idx_users_referrals ON users(referrals_count)")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_users_lifetime ON users(lifetime_referrals)")
cursor.execute("CREATE INDEX IF NOT EXISTS idx_season_winners_season ON season_winners(season)")
conn.commit()

# ========= –£–¢–ò–õ–ò–¢–´ –ë–î =========
def get_user(tg_id: int):
    cursor.execute("SELECT tg_id, username, referrer_id, referrals_count, suspicious, lifetime_referrals FROM users WHERE tg_id=?", (tg_id,))
    return cursor.fetchone()

def add_user(tg_id, username, referrer_id=None, suspicious=0):
    try:
        cursor.execute(
            "INSERT INTO users (tg_id, username, referrer_id, suspicious) VALUES (?, ?, ?, ?)",
            (tg_id, username, referrer_id, suspicious)
        )
        conn.commit()
    except sqlite3.IntegrityError:
        pass

def increment_referrer(referrer_id: int, delta: int = 1):
    cursor.execute("UPDATE users SET referrals_count = referrals_count + ?, lifetime_referrals = lifetime_referrals + ? WHERE tg_id=?",
                   (delta, delta, referrer_id))
    conn.commit()
    check_and_award_levels(referrer_id)

def check_and_award_levels(tg_id: int):
    cursor.execute("SELECT lifetime_referrals FROM users WHERE tg_id=?", (tg_id,))
    row = cursor.fetchone()
    lifetime = row[0] if row else 0
    for threshold, prize_name in LEVELS:
        if lifetime >= threshold:
            cursor.execute("SELECT 1 FROM awarded_levels WHERE tg_id=? AND level_threshold=?", (tg_id, threshold))
            already = cursor.fetchone()
            if not already:
                cursor.execute("INSERT INTO awarded_levels (tg_id, level_threshold) VALUES (?, ?)",
                               (tg_id, threshold))
                cursor.execute("INSERT INTO prizes (tg_id, prize) VALUES (?, ?)",
                               (tg_id, f"–ü—Ä–∏–∑ –∑–∞ —É—Ä–æ–≤–µ–Ω—å {threshold}: {prize_name}"))
                conn.commit()

# ========= –û–ë–©–ò–ï –•–≠–ù–î–õ–ï–†–´ =========
@router.message(CommandStart(deep_link=True))
async def start_deeplink(msg: types.Message, command: CommandStart):
    user_id = msg.from_user.id
    referrer_id = int(command.args) if command.args and command.args.isdigit() else None

    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if getattr(member, "status", "left") in ["left", "kicked"]:
            await msg.answer(f"–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_ID} –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /start")
            return
    except Exception:
        # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω/–ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –±–æ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –ª—É—á—à–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–Ø –Ω–µ –±–æ—Ç üü¢", callback_data=f"captcha_ok:{user_id}:{referrer_id or 0}")
    ]])
    await msg.answer("–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫:", reply_markup=keyboard)

@router.message(CommandStart())
async def start_plain(msg: types.Message):
    user_id = msg.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if getattr(member, "status", "left") in ["left", "kicked"]:
            await msg.answer(f"–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {CHANNEL_ID} –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ /start")
            return
    except Exception:
        pass

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–Ø –Ω–µ –±–æ—Ç üü¢", callback_data=f"captcha_ok:{user_id}:0")
    ]])
    await msg.answer("–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("captcha_ok"))
async def captcha_ok(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    user_id = int(parts[1])
    referrer_id = int(parts[2]) if parts[2] != "0" else None
    user = callback.from_user

    existed = get_user(user_id)
    suspicious = 0
    if not user.username or not user.first_name:
        suspicious = 1

    add_user(user_id, user.username, referrer_id, suspicious)

    if not existed and referrer_id and referrer_id != user_id:
        increment_referrer(referrer_id)

    link = f"https://t.me/{(await bot.me()).username}?start={user_id}"
    await callback.message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!

"
        f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: {link}

"
        "–°–º–æ—Ç—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ /me"
    )
    await callback.answer()

@router.message(Command("me"))
async def me(msg: types.Message):
    user_id = msg.from_user.id
    cursor.execute("SELECT referrals_count, lifetime_referrals FROM users WHERE tg_id=?", (user_id,))
    row = cursor.fetchone()
    season = row[0] if row else 0
    lifetime = row[1] if row else 0
    await msg.answer(
        f"üë§ –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:
"
        f"‚Äî –ó–∞ —Å–µ–∑–æ–Ω: {season}
"
        f"‚Äî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {lifetime}

"
        f"–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: https://t.me/{(await bot.me()).username}?start={user_id}"
    )

# ========= –ê–î–ú–ò–ù =========
@router.message(Command("whoami"))
async def whoami(msg: types.Message):
    await msg.answer(f"üîé –¢–≤–æ–π Telegram ID: <code>{msg.from_user.id}</code>")

@router.message(Command("admin_stats"))
async def admin_stats(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT COUNT(*), COALESCE(SUM(referrals_count),0), COALESCE(SUM(lifetime_referrals),0) FROM users")
    total_users, total_refs_season, total_refs_lifetime = cursor.fetchone()
    await msg.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
"
        f"üîó –ó–∞ —Å–µ–∑–æ–Ω: {total_refs_season}
"
        f"üèÅ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {total_refs_lifetime}"
    )

@router.message(Command("id"))
async def get_id(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    parts = msg.text.split()
    if len(parts) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /id @username")
        return
    username = parts[1].lstrip("@")
    cursor.execute("SELECT tg_id FROM users WHERE username=?", (username,))
    row = cursor.fetchone()
    if row:
        await msg.answer(f"üë§ @{username} ‚Üí <code>{row[0]}</code>")
    else:
        await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

@router.message(Command("adduser"))
async def adduser_cmd(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    parts = msg.text.split()
    if len(parts) < 4:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /adduser <tg_id> <username> <refs>  (refs –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∏ –∫ —Å–µ–∑–æ–Ω—É, –∏ –∫ –ª–∞–π—Ñ—Ç–∞–π–º—É)")
        return
    tg_id = int(parts[1])
    username = parts[2]
    refs = int(parts[3])
    cursor.execute("""
        INSERT INTO users (tg_id, username, referrals_count, lifetime_referrals, suspicious)
        VALUES (?, ?, ?, ?, 0)
        ON CONFLICT(tg_id) DO UPDATE SET
          username=excluded.username,
          referrals_count=excluded.referrals_count,
          lifetime_referrals=excluded.lifetime_referrals
    """, (tg_id, username, refs, refs))
    conn.commit()
    check_and_award_levels(tg_id)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({tg_id}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: —Å–µ–∑–æ–Ω={refs}, –≤—Å–µ–≥–æ={refs}.")

@router.message(Command("linkref"))
async def linkref(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    parts = msg.text.split()
    if len(parts) < 3:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /linkref <referrer_id> <referral_id>")
        return
    referrer_id = int(parts[1])
    referral_id = int(parts[2])
    cursor.execute("UPDATE users SET referrer_id=? WHERE tg_id=?", (referrer_id, referral_id))
    conn.commit()
    increment_referrer(referrer_id, delta=1)
    await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {referral_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª {referrer_id}")

@router.message(Command("referrals"))
async def referrals(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    parts = msg.text.split()
    if len(parts) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /referrals <tg_id>")
        return
    tg_id = int(parts[1])
    cursor.execute("SELECT tg_id, username FROM users WHERE referrer_id=?", (tg_id,))
    rows = cursor.fetchall()
    if not rows:
        await msg.answer(f"–£ {tg_id} –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.")
        return
    text = f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}:
"
    for ref_id, username in rows[:100]:
        name = f"@{username}" if username else f"id:{ref_id}"
        text += f" - {name}
"
    if len(rows) > 100:
        text += f"
‚Ä¶ –∏ –µ—â—ë {len(rows)-100}"
    await msg.answer(text)

@router.message(Command("top"))
async def top(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT username, tg_id, lifetime_referrals FROM users ORDER BY lifetime_referrals DESC LIMIT ?", (TOP_LIMIT,))
    rows = cursor.fetchall()
    if not rows:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    text = f"üèÜ –¢–û–ü-{TOP_LIMIT} (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è):

"
    for i, (username, tg_id, refs) in enumerate(rows, start=1):
        name = f"@{username}" if username else f"id:{tg_id}"
        text += f"{i}. {name} ‚Äî {refs} –≤—Å–µ–≥–æ
"
    await msg.answer(text)

@router.message(Command("season_stats"))
async def season_stats(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    season = current_season()
    cursor.execute("SELECT username, tg_id, referrals_count FROM users ORDER BY referrals_count DESC LIMIT ?", (TOP_LIMIT,))
    rows = cursor.fetchall()
    text = f"üìÖ –°–µ–∑–æ–Ω {season} ‚Äî –¢–û–ü-{TOP_LIMIT}:

"
    if rows:
        for i, (username, tg_id, refs) in enumerate(rows, start=1):
            name = f"@{username}" if username else f"id:{tg_id}"
            text += f"{i}. {name} ‚Äî {refs} –∑–∞ —Å–µ–∑–æ–Ω
"
    else:
        text += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ."
    await msg.answer(text)

@router.message(Command("winners"))
async def winners(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    # –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —É—Ä–æ–≤–Ω–µ–π –ø–æ –ª–∞–π—Ñ—Ç–∞–π–º—É
    text = "üéÅ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è):

"
    for threshold, prize in LEVELS:
        cursor.execute("SELECT username, tg_id, lifetime_referrals FROM users WHERE lifetime_referrals >= ? ORDER BY lifetime_referrals DESC", (threshold,))
        rows = cursor.fetchall()
        text += f"‚Äî –£—Ä–æ–≤–µ–Ω—å {threshold}+ ({prize}):
"
        if rows:
            for username, tg_id, refs in rows:
                name = f"@{username}" if username else f"id:{tg_id}"
                text += f"   {name} ‚Äî {refs} –≤—Å–µ–≥–æ
"
        else:
            text += "   (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)
"
        text += "
"
    # –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω–Ω—ã–π –¢–û–ü
    season = current_season()
    cursor.execute("SELECT username, tg_id, referrals_count FROM users ORDER BY referrals_count DESC LIMIT ?", (TOP_LIMIT,))
    rows = cursor.fetchall()
    text += f"üèÅ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω {season} ‚Äî –¢–û–ü-{TOP_LIMIT}:
"
    if rows:
        for i, (username, tg_id, refs) in enumerate(rows, start=1):
            name = f"@{username}" if username else f"id:{tg_id}"
            text += f"{i}. {name} ‚Äî {refs} –∑–∞ —Å–µ–∑–æ–Ω
"
    else:
        text += "   (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)
"
    await msg.answer(text)

@router.message(Command("season_close"))
async def season_close(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    season = current_season()
    cursor.execute("SELECT tg_id, referrals_count FROM users ORDER BY referrals_count DESC LIMIT ?", (SEASON_TOP_N_TO_SAVE,))
    winners = cursor.fetchall()
    if not winners:
        await msg.answer(f"–°–µ–∑–æ–Ω {season}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return
    for place, (tg_id, refs) in enumerate(winners, start=1):
        cursor.execute("INSERT INTO season_winners (season, tg_id, place, referrals_count) VALUES (?, ?, ?, ?)",
                       (season, tg_id, place, refs))
    conn.commit()
    cursor.execute("UPDATE users SET referrals_count = 0")
    conn.commit()
    text = f"‚úÖ –°–µ–∑–æ–Ω {season} –∑–∞–∫—Ä—ã—Ç. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:
"
    for place, (tg_id, refs) in enumerate(winners, start=1):
        cursor.execute("SELECT username FROM users WHERE tg_id=?", (tg_id,))
        row = cursor.fetchone()
        name = f"@{row[0]}" if row and row[0] else f"id:{tg_id}"
        text += f"{place}. {name} ‚Äî {refs} –∑–∞ —Å–µ–∑–æ–Ω
"
    text += "
–°–µ–∑–æ–Ω–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã."
    await msg.answer(text)

@router.message(Command("season_winners"))
async def season_winners(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT season, tg_id, place, referrals_count, given_at FROM season_winners ORDER BY given_at DESC LIMIT 30")
    rows = cursor.fetchall()
    if not rows:
        await msg.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤.")
        return
    text = "üèÖ –ê—Ä—Ö–∏–≤ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–µ–∑–æ–Ω–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∑–∞–ø–∏—Å–µ–π):

"
    for season, tg_id, place, refs, given_at in rows:
        cursor.execute("SELECT username FROM users WHERE tg_id=?", (tg_id,))
        row = cursor.fetchone()
        name = f"@{row[0]}" if row and row[0] else f"id:{tg_id}"
        text += f"{season} ‚Äî –º–µ—Å—Ç–æ {place}: {name} ({refs}) ‚Ä¢ {given_at}
"
    await msg.answer(text)

@router.message(Command("giveprize"))
async def giveprize(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /giveprize <tg_id|@username> <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞>")
        return
    target = parts[1]
    if target.startswith("@"):
        username = target.lstrip("@")
        cursor.execute("SELECT tg_id FROM users WHERE username=?", (username,))
        row = cursor.fetchone()
        if not row:
            await msg.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å /adduser.")
            return
        tg_id = int(row[0])
    else:
        try:
            tg_id = int(target)
        except ValueError:
            await msg.answer("‚ùå –£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π tg_id –∏–ª–∏ @username.")
            return
    prize = parts[2].strip()
    try:
        cursor.execute("INSERT INTO prizes (tg_id, prize) VALUES (?, ?)", (tg_id, prize))
        conn.commit()
        await msg.answer(f"‚úÖ –ü—Ä–∏–∑ ¬´{prize}¬ª –æ—Ç–º–µ—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–∑–∞: {e}")

@router.message(Command("prizeslog"))
async def prizeslog(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT tg_id, prize, given_at FROM prizes ORDER BY given_at DESC LIMIT 50")
    rows = cursor.fetchall()
    if not rows:
        await msg.answer("–ñ—É—Ä–Ω–∞–ª –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return
    text = "üìÇ –ñ—É—Ä–Ω–∞–ª –ø—Ä–∏–∑–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):

"
    for tg_id, prize, given_at in rows:
        text += f"üë§ {tg_id} ‚Äî {prize} ({given_at})
"
    await msg.answer(text)

@router.message(Command("exportdb"))
async def exportdb(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    if not os.path.exists(DB_PATH):
        await msg.answer("‚ùå –§–∞–π–ª –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if os.path.getsize(DB_PATH) == 0:
        await msg.answer("‚ùå –§–∞–π–ª –±–∞–∑—ã –ø—É—Å—Ç–æ–π.")
        return
    try:
        file = FSInputFile(DB_PATH, filename="referrals.db")
        await msg.answer_document(file)
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")

@router.message(Command("importdb"))
async def importdb(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    if not msg.reply_to_message or not msg.reply_to_message.document:
        await msg.answer("–ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª referrals.db –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /importdb")
        return
    doc = msg.reply_to_message.document
    if not doc.file_name.endswith(".db"):
        await msg.answer("‚ùå –≠—Ç–æ –Ω–µ .db —Ñ–∞–π–ª.")
        return
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        global conn, cursor
        try:
            conn.close()
        except Exception:
            pass
        file = await bot.get_file(doc.file_id)
        downloaded = await bot.download_file(file.file_path)
        with open(DB_PATH, "wb") as f:
            f.write(downloaded.read())
        await msg.answer("‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")

# ========= –í–´–ì–†–£–ó–ö–ò –°–ü–ò–°–ö–û–í =========
@router.message(Command("all_users"))
async def all_users(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    parts = msg.text.split()
    page = 1
    if len(parts) >= 2 and parts[1].isdigit():
        page = max(1, int(parts[1]))
    per_page = 50
    offset = (page - 1) * per_page
    cursor.execute("SELECT tg_id, username, referrals_count, lifetime_referrals FROM users ORDER BY tg_id LIMIT ? OFFSET ?", (per_page, offset))
    rows = cursor.fetchall()
    if not rows:
        await msg.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        return
    text = f"üë• –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}:

"
    for tg_id, username, season, lifetime in rows:
        name = f"@{username}" if username else f"id:{tg_id}"
        text += f"{name} ‚Äî —Å–µ–∑–æ–Ω: {season}, –≤—Å–µ–≥–æ: {lifetime}
"
    text += f"
–ò—Å–ø–æ–ª—å–∑—É–π: /all_users <—Å—Ç—Ä–∞–Ω–∏—Ü–∞> (–ø–æ {per_page} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)"
    await msg.answer(text)

@router.message(Command("export_users"))
async def export_users(msg: types.Message):
    if msg.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT tg_id, username, referrer_id, referrals_count, lifetime_referrals, suspicious FROM users")
    rows = cursor.fetchall()
    fname = "users.csv"
    with open(fname, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["tg_id", "username", "referrer_id", "season_refs", "lifetime_refs", "suspicious"])
        writer.writerows(rows)
    await msg.answer_document(FSInputFile(fname))

# ========= RUN =========
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
